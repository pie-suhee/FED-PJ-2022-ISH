@charset "utf-8";

html,body,ul,ol {
    margin: 0;
    padding: 0;
}

ul,ol{
    list-style: none;
}

html,body,#wrap,#wrap>ul {
    height: 100%;
}

/* 
    float 방식
    1. 옆으로 흐를요소에 직접 float셋팅
    2. 등분할일 경우 width값 %계산
    3. 높이값을 부모에 채울 경우 height 100% 셋팅
    4. 부모박스에 높이값이 없이 자동으로 자식요소를 인식하려면 마지막 clear속성 셋팅필요

    #wrap>ul>li {
        float: left;
        width: 20%;
        height: 100%;
    } 
*/

#wrap>ul>li:nth-child(1) {
    background: url(../images/m01_bg.jpg) no-repeat center/cover;
}
#wrap>ul>li:nth-child(2) {
    background: url(../images/m02_bg.jpg) no-repeat center/cover;
}
#wrap>ul>li:nth-child(3) {
    background: url(../images/m03_bg.jpg) no-repeat center/cover;
}
#wrap>ul>li:nth-child(4) {
    background: url(../images/m04_bg.jpg) no-repeat center/cover;
}
#wrap>ul>li:nth-child(5) {
    background: url(../images/m05_bg.jpg) no-repeat center/cover;
}

/***********************************************
    [ 플렉스 디스플레이 박스 ]
    flex 란? - flexible (유연한-에서 나온말)

    - 가변적인 자식요소를 컨트롤하기 위해 
      CSS3에서 새롭게 선보인 display 기술

    [ 플렉스 셋팅법 ]
    1. 대상: 컨트롤할 요스들의 직계부모요소
    2. 등분할셋팅
      - 자식요소를 같은 비율로 채울 때
        자식요소에 flex속성값을 1로 쓰면 된다!
    3. 일반적인 셋팅
      - 특정 크기나 내용이 있는 블록요소인 자식을
        옆으로 흐르게 한다(flex셋팅 일단 불필요!)
***********************************************/

#wrap>ul {
    display: flex;
}

#wrap>ul>li {
    /* 등분할 플렉스 속성 */
    flex: 1;

    /* 
        [ flex 속성 : 플렉스 자식요소에 주는 속성 ]
        -> flex : 한번에 아래 3가지 속성을 줌

        flex: 1 숫자하나만 쓰면 
        flex: 1 1 0 과 동일
        해석) 
        커질래? 응(1), 작아질래? 응(1), 가로크기 0 (설정없음)
        따로 설정시 아래와 같다!
        flex-grow: 1;
        flex-shrink: 1;
        flex-basis: 0;

        1) flex-grow: 1 | 0 -> 커질래? 1 응 | 0 아니
        2) flex-shrink: 1 | 0 -> 작아질래? 1 응 | 0 아니
        3) flex-basis: 설정값(px,%,em,rem,vw등)
        -> width 가로크기를 설정하는 속성
        -> 만약 0을 쓰면 속성값 없음!
    */
}

/* 타이틀 공통 */
.tit {
    width: 500px;
    height: 100px;
    border: 5px double #ffffff;
    position: absolute;
    top: 100px;
    left: 50%;
    transform: translateX(-50%);
}

.tit>li {
    width: 50px;
    height: 50px;
    border: 3px solid #ffffff;
    border-radius: 50%;
    background-color: red;
    text-align: center;
    /* 글자셋팅 - font: 스두크/줄체 */
    font: bold 14px/50px Verdana;
    color: #ffffff;
}

/* 타이틀 1 */
.t1 {
    display: flex;

    /* 
        [ justify-content 속성 ]
        - 진행방향정렬속성 (justify 양쪽정렬의 뜻)
        - content 는 진행방향으로 여러개의 아이템요소가 있으니까
        컨텐트임!
        1) flex-start : 처음위치(기본값)
        2) flex-end : 끝위치
        3) center : 중앙
        4) space-between : 
          아이템요소 양쪽끝에 붙고 사이간격 일정
        5) space-around : 
          아이템요소 양쪽간격 일정
        6) space-evenly : 
          아이템요소 양쪽과 사이간격 일정 

        [ align-items 속성 ]
        - 진행방향의 수직 정렬 속성
        - 수직방향의 아이템(요소)이 하나씩일때 사용

        1) flex-start : 처음위치(기본값)
        2) flex-end : 끝위치
        3) center : 중앙
        4) stretch : 수직방향 부모박스에 꽉채워 늘림!
          (단, height값이 auto여야함!)
        5) baseline : 각 요소에 글자가 있다면 
          글자기준선(baseline)을 기준으로 정렬함!
          (글자의 line-height를 변경해서 적용해봄!)
    */

    justify-content: space-evenly;
    align-items: center;

}

/* 타이틀 2 */
.t2 {
    display: flex;
    top: 250px;
    justify-content: space-between;
    align-items: baseline;
}

.t2 li:nth-child(2) {
    line-height: 80px;
}

.t2 li:nth-child(4) {
    line-height: 30px;
}

/* 타이틀 3 */
.t3 {
    display: flex;
    top: 400px;
    justify-content: space-between;
    align-items: center;
}

.t3 li:nth-child(4) {
    margin-left: auto;
    /* 
        선택요소의 떨어뜨리려는 방향으로 
        마진을 auto로 설정하면 
        flex에서 끝으로 이동시켜준다! 
    */
}

/* 타이틀 4 */
.t4 {
    display: flex;
    width: 150px;
    height: 500px;
    top: 200px;
    left: 50px;
    transform: none;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
}
.t4 li:nth-child(5) {
    margin-top: auto;
}

/* 타이틀 5 */
.t5 {
    display: flex;
    width: 150px;
    top: 50px;
    left: 50px;
    transform: none;
    justify-content: space-between;
    align-items: baseline;
}

.t5 li {
    flex-shrink: 0;

    /*
        [ flex 자식요소 속성을 셋팅하지 않으면? ] 
        기본값은 아래와 같다!
        flex: initial
        즉, 아래와 동일함
        flex: 0 1 auto
        -> 두번째 값이 flex-shrink:1 로 셋팅!
        그래서 부모박스 크기가 작아지면 
        자식요소도 가로크기가 같이 줄어들게됨!
        이 값을 0으로 변경하면 
        자기 셋팅된 원래 크기를 유지하며 
        부모박스 바깥으로 나가게됨!
     */
}

/* 타이틀 6 */
.t6 {
    display: flex;
    height: 250px;
    top: 550px;
    flex-wrap: wrap;
    align-content: center;
}