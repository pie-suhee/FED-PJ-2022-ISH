html,body {
    margin: 0;
    padding: 0;
    overflow: hidden;
}

body {
    background-color: #000000;
}

.bx {
    height: 1000px;
    background: url(../images/oldTVON.png) no-repeat center/auto;
}

.tit {
    text-align: center;
    margin: 0;
    padding: 50px 0;
    color: #ffffff;
}

.tit::after {
    content: "나야나!";
    display: block;
}

.screen {
    width: 345px;
    height: 258px;
    position: absolute;
    top: 307px;
    left: 50%;
    transform: translateX(-63%);
    z-index: -1;
}

.screen img {
    width: 100%;
    height: 100%;
    display: none;
}

.screen img:first-child {
    display: inline;
}

@media screen and (max-width:1200px) {
    .tit::after {
        content: "최대 1200px이하";
        color: pink;
    }

    .screen img:first-child {
        display: none;
    }

    .screen img:nth-child(2) {
        display: inline;
    }
}

@media screen and (max-width:1100px) {
    .tit::after {
        content: "최대 1100px이하";
        color: lime;
    }

    .screen img:nth-child(2) {
        display: none;
    }

    .screen img:nth-child(3) {
        display: inline;
    }
}

@media screen and (max-width:1000px) {
    .tit::after {
        content: "최대 1000px이하";
        color: orange;
    }

    .screen img:nth-child(3) {
        display: none;
    }

    .screen img:nth-child(4) {
        display: inline;
    }
}

@media screen and (max-width:900px) {
    .tit::after {
        content: "최대 900px이하";
        color: purple;
    }

    .screen img:nth-child(4) {
        display: none;
    }

    .screen img:nth-child(5) {
        display: inline;
    }
}

@media screen and (max-width:850px) {
    .tit::after {
        content: "최대 850px이하";
        color: palevioletred;
    }

    .screen img:nth-child(5) {
        display: none;
    }

    .screen img:nth-child(6) {
        display: inline;
    }
}

@media screen and (max-width:830px) {
    .tit::after {
        content: "최대 830px이하";
        color: yellowgreen;
    }

    .screen img:nth-child(6) {
        display: none;
    }

    .screen img:nth-child(7) {
        display: inline;
    }
}

@media screen and (max-width:810px) {
    .tit::after {
        content: "최대 810px이하";
        color: aquamarine;
    }

    .screen img:nth-child(7) {
        display: none;
    }

    .screen img:nth-child(8) {
        display: inline;
    }
}

@media screen and (max-width:790px) {
    .tit::after {
        content: "최대 790px이하";
        color: gold;
    }

    .screen img:nth-child(8) {
        display: none;
    }

    .screen img:nth-child(9) {
        display: inline;
    }
}

@media screen and (max-width:770px) {
    .tit::after {
        content: "최대 770px이하";
        color: burlywood;
    }

    .screen img:nth-child(9) {
        display: none;
    }

    .screen img:nth-child(10) {
        display: inline;
    }
}

@media screen and 
(orientation:portrait) and
(max-width:1000px) {
    .bx {
        background-size: auto 60%;
        background-position: top;
    }

    .screen {
        top: 130px;
    }
}

@media screen and 
(orientation:landscape) and
(max-width:1000px) {
    .tit {
        text-align: left;
        text-indent: 15px;
    }
    
    .bx {
        background-size: auto 53%;
        background-position: center -100px;
    }

    .screen {
        top: 18px;
        transform: translateX(-49%);
    }
}
/* 
     [ 미디어쿼리(Media Query)란?

    - 디바이스의 가로 사이즈에 대해 계속된
    질의(Query)를 브라우저에 함으로써 사이즈
    변경 시점에 필요한 CSS를 적용하여 디자인
    변경을 할 수 있도록 구현된 CSS 코딩

    - 반응형(적응형)웹을 구현하는 핵심

    1. 반응형웹(Responsive Web) :
    미디어 화면크기에 따라 종합적인 변경사항을
    기술적으로 다룬 사이트

    2. 적응형웹(Adaptive Web) :
    미디어 화면크기에 따라 레이아웃 등의 CSS로
    요소의 속성변경을 다룬 웹사이트

    - 우리가 CSS 코딩으로 구현하는 것은 적응형웹이다!
    즉, 적응형웹은 반응형웹의 일부분이다!
    하지만 일반적인 명칭으로 반응형웹으로 부른다!

    [ 구현방법 ]

    @media only screen and (max-width:최대px) and
    (min-width:최소px){
        CSS코딩구역
    }

    1) @media : 미디어쿼리 선언부

    2) only screen (또는 screen) : 회피코드
        -> 미디어쿼리를 아는 브라우저만 읽어라!
        -> only 를 쓰면 구버전 user agent 는
            미디어쿼리를 읽지 못하게 하는 것!
        (현재는 only를 쓴 것과 안쓴것의 차이가 없음!)

    3) max-width : 최대사이즈
        -> 반드시 px단위를 사용함, 소괄호 사용함!

    4) min-width : 최소사이즈
        -> 반드시 px단위를 사용함, 소괄호 사용함!

    -> 최대, 최소 사이즈는 표기된 사이즈를 포함함

    -> 최대 사이즈만 쓸 경우 :
        - 기준 사이즈 이하가 모두 포함됨
        - 큰 사이즈 부터 작은 사이즈 순으로 코딩해야
        제대로 적용됨!(하위 사이즈가 덮어씀)

    -> 최소 사이즈만 쓸 경우 :
        - 기준 사이즈 이상이 모두 포함됨
        - 작은 사이즈 부터 큰 사이즈 순으로 코딩해야
        제대로 적용됨!(상위 사이즈가 덮어씀)

    5) and : 구문 사이 연결자
        -> 주의사항 - and 앞뒤공백 필수!


    __________________________________________

    [ 웹페이지 가로/세로 모드 인식하기 ]

    1. 가로모드 -> (orientation:landscape)
        - landscape는 "풍경"이란뜻

    @media (orientation:landscape) {
        가로모드 CSS
    }

    2. 세로모드 -> (orientation:portrait)
        - portrait는 "초상화"란뜻

    @media (orientation:portrait) {
        세로모드 CSS
    }


    __________________________________________    


    [ 미디어 쿼리 코딩시 주의사항! ]

    1. 기존 CSS 선택자와 동일하게 코딩한다!
        (그래야 덮어쓰기가 원활하다!)

    2. max-width 로 셋팅한 후 큰 사이즈 부터 작은 사이즈
    순으로 코딩한다! (min-width는 순서반대!)
    -> 그래야 같은 속성 덮어쓰기가 가능함!

    3. 미디어쿼리를 외부CSS파일로 만들어 사용할 경우
        @import방식으로 호출하면 적용되지 않는다!
        이유는 미디어쿼리는 덮어쓰기 방식이므로
        기존 CSS코드보다 아래에 있어야함!!!!
        link방식으로 html코드 상단에 기본 CSS 외부파일보다
        아래에서 호출하면 된다!!!

    예) 
    <head>
        <link rel="stylesheet" href="일반CSS">
        <link rel="stylesheet" href="미디어쿼리CSS">
    </head>
*/